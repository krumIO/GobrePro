// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gobre

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GobreClient is the client API for Gobre service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GobreClient interface {
	HandleFileRequest(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error)
}

type gobreClient struct {
	cc grpc.ClientConnInterface
}

func NewGobreClient(cc grpc.ClientConnInterface) GobreClient {
	return &gobreClient{cc}
}

func (c *gobreClient) HandleFileRequest(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, "/proto.Gobre/HandleFileRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GobreServer is the server API for Gobre service.
// All implementations must embed UnimplementedGobreServer
// for forward compatibility
type GobreServer interface {
	HandleFileRequest(context.Context, *FileRequest) (*FileResponse, error)
	mustEmbedUnimplementedGobreServer()
}

// UnimplementedGobreServer must be embedded to have forward compatible implementations.
type UnimplementedGobreServer struct {
}

func (UnimplementedGobreServer) HandleFileRequest(context.Context, *FileRequest) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFileRequest not implemented")
}
func (UnimplementedGobreServer) mustEmbedUnimplementedGobreServer() {}

// UnsafeGobreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GobreServer will
// result in compilation errors.
type UnsafeGobreServer interface {
	mustEmbedUnimplementedGobreServer()
}

func RegisterGobreServer(s grpc.ServiceRegistrar, srv GobreServer) {
	s.RegisterService(&Gobre_ServiceDesc, srv)
}

func _Gobre_HandleFileRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GobreServer).HandleFileRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gobre/HandleFileRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GobreServer).HandleFileRequest(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gobre_ServiceDesc is the grpc.ServiceDesc for Gobre service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gobre_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Gobre",
	HandlerType: (*GobreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleFileRequest",
			Handler:    _Gobre_HandleFileRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
